{"ast":null,"code":"var _jsxFileName = \"/Users/benray/sandbox/TruMedia/TruMedia_Networks_Project_BenRay/src/components/LineGraph.js\";\n//Last Updated: Ben Ray 1/18/22\nimport React, { Component, createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport Line from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LineGraph extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillUpdate = () => {};\n\n    this.componentDidMount = () => {\n      console.log(this.props.qbStats);\n      this.setState({\n        qbStats: this.props.qbStats,\n        ctx: document.getElementById('myChart').getContext('2d')\n      });\n      const myChart = new Line(this.myRef, {\n        type: 'line',\n        data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n\n    this.render = () => {\n      const {\n        qbStats,\n        ctx\n      } = this.state;\n      const myChart = new Line(this.myRef, {\n        type: 'line',\n        data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), qbStats && qbStats.map((x, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"dddd\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 43\n        }, this)), \"dddd\", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            id: \"myChart\",\n            ref: this.myRef,\n            width: \"100\",\n            height: \"100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      qbStats: []\n    };\n    this.myRef = /*#__PURE__*/createRef();\n    this.ctx = /*#__PURE__*/React.createRef();\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  qbStats: state.qbStats\n});\n\nexport default connect(mapStateToProps)(LineGraph);","map":{"version":3,"sources":["/Users/benray/sandbox/TruMedia/TruMedia_Networks_Project_BenRay/src/components/LineGraph.js"],"names":["React","Component","createRef","connect","Line","LineGraph","constructor","props","componentWillUpdate","componentDidMount","console","log","qbStats","setState","ctx","document","getElementById","getContext","myChart","myRef","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","render","state","map","x","i","mapStateToProps"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,mBATmB,GASG,MAAM,CAE3B,CAXkB;;AAAA,SAcnBC,iBAdmB,GAcC,MAAM;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,OAAvB;AACG,WAAKC,QAAL,CAAc;AACZD,QAAAA,OAAO,EAAE,KAAKL,KAAL,CAAWK,OADR;AAEZE,QAAAA,GAAG,EAAEC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,UAAnC,CAA8C,IAA9C;AAFO,OAAd;AAKA,YAAMC,OAAO,GAAG,IAAId,IAAJ,CAAS,KAAKe,KAAd,EAAqB;AACnCC,QAAAA,IAAI,EAAE,MAD6B;AAEnCC,QAAAA,IAAI,EAAE;AACFC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADN;AAEFC,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,YADA;AAEPH,YAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPI,YAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,YAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,YAAAA,WAAW,EAAE;AAnBN,WAAD;AAFR,SAF6B;AA0BnCC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,CAAC,EAAE;AACCC,cAAAA,WAAW,EAAE;AADd;AADC;AADH;AA1B0B,OAArB,CAAhB;AAmCD,KAxDkB;;AAAA,SA4DnBC,MA5DmB,GA4DV,MAAM;AACb,YAAM;AAAEpB,QAAAA,OAAF;AAAWE,QAAAA;AAAX,UAAmB,KAAKmB,KAA9B;AAEA,YAAMf,OAAO,GAAG,IAAId,IAAJ,CAAS,KAAKe,KAAd,EAAqB;AACnCC,QAAAA,IAAI,EAAE,MAD6B;AAEnCC,QAAAA,IAAI,EAAE;AACFC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADN;AAEFC,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,YADA;AAEPH,YAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPI,YAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,YAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,YAAAA,WAAW,EAAE;AAnBN,WAAD;AAFR,SAF6B;AA0BnCC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,CAAC,EAAE;AACCC,cAAAA,WAAW,EAAE;AADd;AADC;AADH;AA1B0B,OAArB,CAAhB;AAmCA,0BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAMGnB,OAAO,IAAIA,OAAO,CAACsB,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,kBAAU;AAAA;AAAA,WAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,gBAAtB,CANd,uBAOE;AAAA,iCACA;AAAQ,YAAA,EAAE,EAAC,SAAX;AAAqB,YAAA,GAAG,EAAE,KAAKjB,KAA/B;AAAsC,YAAA,KAAK,EAAC,KAA5C;AAAkD,YAAA,MAAM,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA,sBADF;AAaD,KA/GkB;;AAEjB,SAAKc,KAAL,GAAa;AACXrB,MAAAA,OAAO,EAAE;AADE,KAAb;AAGA,SAAKO,KAAL,gBAAajB,SAAS,EAAtB;AACA,SAAKY,GAAL,gBAAWd,KAAK,CAACE,SAAN,EAAX;AACD;;AAR+B;;AAoHlC,MAAMmC,eAAe,GAAGJ,KAAK,KAAK;AAChCrB,EAAAA,OAAO,EAAEqB,KAAK,CAACrB;AADiB,CAAL,CAA7B;;AAIA,eAAeT,OAAO,CAACkC,eAAD,CAAP,CAAyBhC,SAAzB,CAAf","sourcesContent":["//Last Updated: Ben Ray 1/18/22\nimport React, { Component, createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport Line from 'chart.js/auto';\n\nclass LineGraph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      qbStats: []\n    };\n    this.myRef = createRef();\n    this.ctx = React.createRef();\n  }\n\n  componentWillUpdate = () => {\n   \n  }\n\n\n  componentDidMount = () => {\n console.log(this.props.qbStats);\n    this.setState({\n      qbStats: this.props.qbStats,\n      ctx: document.getElementById('myChart').getContext('2d')\n    })\n\n    const myChart = new Line(this.myRef, {\n      type: 'line',\n      data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n              label: '# of Votes',\n              data: [12, 19, 3, 5, 2, 3],\n              backgroundColor: [\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 206, 86, 0.2)',\n                  'rgba(75, 192, 192, 0.2)',\n                  'rgba(153, 102, 255, 0.2)',\n                  'rgba(255, 159, 64, 0.2)'\n              ],\n              borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)'\n              ],\n              borderWidth: 1\n          }]\n      },\n      options: {\n          scales: {\n              y: {\n                  beginAtZero: true\n              }\n          }\n      }\n  });\n    \n  };\n\n  \n\n  render = () => {\n    const { qbStats, ctx } = this.state;\n    \n    const myChart = new Line(this.myRef, {\n      type: 'line',\n      data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n              label: '# of Votes',\n              data: [12, 19, 3, 5, 2, 3],\n              backgroundColor: [\n                  'rgba(255, 99, 132, 0.2)',\n                  'rgba(54, 162, 235, 0.2)',\n                  'rgba(255, 206, 86, 0.2)',\n                  'rgba(75, 192, 192, 0.2)',\n                  'rgba(153, 102, 255, 0.2)',\n                  'rgba(255, 159, 64, 0.2)'\n              ],\n              borderColor: [\n                  'rgba(255, 99, 132, 1)',\n                  'rgba(54, 162, 235, 1)',\n                  'rgba(255, 206, 86, 1)',\n                  'rgba(75, 192, 192, 1)',\n                  'rgba(153, 102, 255, 1)',\n                  'rgba(255, 159, 64, 1)'\n              ],\n              borderWidth: 1\n          }]\n      },\n      options: {\n          scales: {\n              y: {\n                  beginAtZero: true\n              }\n          }\n      }\n  });\n\n    return (\n      <>\n        <h1>Chart</h1>\n\n\n\n        \n        {qbStats && qbStats.map((x, i) => <div key={i}>dddd</div>) }dddd\n        <div>\n        <canvas id=\"myChart\" ref={this.myRef} width=\"100\" height=\"100\"></canvas>\n            </div>\n      </>\n    );\n  };\n  \n}\n\nconst mapStateToProps = state => ({\n  qbStats: state.qbStats,\n});\n\nexport default connect(mapStateToProps)(LineGraph)\n\n"]},"metadata":{},"sourceType":"module"}